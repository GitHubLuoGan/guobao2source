-- 函数变量本身所使用的词汇,应是从大的范畴==>小的范畴
  -- 错误的例子:
    MY_SHOP_GROUP = 31        -- 
    MIAN_MENU_GROUP = 3
    MIAN_PACKAGE_GROUP = MIAN_MENU_GROUP + 1
  -- 正确的例子:
    GROUP_MY_SHOP = 31        -- 
    GROUP_MAIN_MENU = 3
    GROUP_MAIN_PACKAGE = GROUP_MAIN_MENU + 1

-- 全局常数
  GLOBAL_CONST = 0  
-- 全局变量
  gVarName     = 0  
-- 全局函数,函数参数
function gfDoSomething(paramName1,paramName2) 
  -- 局部变量
  local varName = 0                 
   
end
-- 全局函数,函数参数
gfDoSomething = 
  function (paramName1,paramName2) 
  -- 局部变量
    local varName = 0                 
   
  end


  gGfxDevice = {
-- 成员变量
    screenWidth = 800,
    screenHeight = 480,
-- 成员函数
    functionName = function (paramName1,paramName2)
      
      end,
-- 成员函数
    functionName2 = function (paramName1,paramName2)
      
      end
  }

-- 使用function做为开头的声明语句定义function
functioin gGfxDevice.funcionName( paramName1, paramName2 )

--[[--------------------------------------------------
类定义
--------------------------------------------------]]--
-- CustomClass
-- 文件名为 类名.lua
-- 定义class可以不写类名，使用M代替
local super = SuperClass
local M = class( super )

-- 类静态变量，在成员方法定义之前定义（一般为常量）
M.STATIC_CONST_NAME = nil

-- 内部变量（不需要外部访问的）采用local变量
local INTERAL_CONST_NAME = nil

-- 类构造方法
-- 类成员变量的定义地方
function M:init()
	super.init( self )		-- 调用基类的构造方法

	-- 类成员采用<b>名词</>，小写字母开头的驼峰命名法，
	self.memberName1 = nil
	self.thisIsFiveWordName = nil

	-- 内部成员采用下划线开头+小写字母开头的驼峰命名法
	self._interalMemberName1 = nil
	self._thisIsFiveWordName = nil
end

-- 类成员方法采用<b>动词</>，如：getXxx, setXxx, covertToXxx 等
function M:doSomthing( paramName1, paramName2 )
	-- 需要多次调用的成员，采用local变量加速
	-- 在不影响可读性的情况下，可重命名为更短的名字
	local member = self.memberForXxx

	if member:isXxx() then
		member:setXxx( ... )
	end
end

-- 变量的访问方法采用 getMemberName, setMemberName 配对使用
function M:getMemberName()
	return self._memberName
end

function M:setMemberName( value )
	self._memberName = value
end

-- 布尔型的变量的访问方法采用 is 开头，而不是 get
-- 如 isVisible(), isEnabled()
function M:isBoolMember()
	return self._boolMember
end

return M

-- 在类require的地方，使用类名接收M
CustomClass = require( "fileName" )



-- 事件回调
采用 on + 事件名称 + 控件（触发者）名称
如：
onClickSomething
onSelectedItem



--[[--------------------------------------------------
总结命名规律
常量		名词 全大写字母 下划线分割			CONST_NAME
变量		名词 首字母小写 驼峰命名			customVar

类名		名词 首字母大写 驼峰命名			RadioButton
类方法		动词 首字母小写	驼峰命名			M:openNextScene
类内部方法	动词 下划线开头 首字母小写	驼峰命名	M:_interalOpenNextScene

方法参数、局部变量 采用%变量%的命名规范
--------------------------------------------------]]--

--[[--------------------------------------------------
模块标准
--------------------------------------------------]]--

-- 模块名称
  module("MODULE_NAME",package.seeall)

-- 模块常数
  mMODULE_CONST   = 0
-- 模块变量
  mVarName        = 0
-- 模块函数,函数参数
function mfDoSomething(paramName1, paramName2)

end

--[[--------------------------------------------------
控件变量标准
--------------------------------------------------]]--

-- 窗体控件变量
  buttonApply           = nil
  windowShop            = nil
  checkboxSavePassword  = nil
  editboxUserName       = nil
  fontMyFontName        = nil
  imageBackground       = nil
  imagelistPhotos       = nil
  labelAskForInput      = nil
  linegraphPrice        = nil
  progressbarHP         = nil
  radiobuttonOption1    = nil
  scrollbarVarName      = nil
  sliderVarName         = nil
  textboxVarName        = nil
  textVarName           = nil
  textstylesVarName     = nil

--[[----------------------------------------------------------
  优化:局部变量加速函数和变量的访问
  要求:必须掌握
----------------------------------------------------------]]--
  local gGlobalVars = gGlobalVars     -- 重度访问的全局变量或者表,可以用这个技巧来提升速度
  local sin = math.sin 
  for i = 1, 1000000 do 
    local x = math.sin(i)     -- 慢
    local x = sin(i)          -- 快
  end 
                                                                 
  local sin = math.sin 
  function foo (x) 
    for i = 1, 1000000 do 
      x = x + math.sin(i)     -- 慢
      x = x + sin(i)          -- 快
    end 
    return x 
  end 
  
  
--[[----------------------------------------------------------
  优化:表格构造式避免重哈希
  要求:必须掌握
----------------------------------------------------------]]--

  for i = 1, 1000000 do 
  local a = {} 
  a[1] = 1; a[2] = 2; a[3] = 3 
  end 
  for i = 1, 1000000 do 
  local a = {true, true, true}  -- 快,最好的构造式
  a[1] = 1; a[2] = 2; a[3] = 3  -- 快
  end 
  local badInitialedTable  = {[1] = true, [2] = true, [3] = true} --快,但是轻微浪费内存

--[[----------------------------------------------------------
  优化:清理表的最佳方法是创建新表
  要求:必须掌握
----------------------------------------------------------]]--

--[[----------------------------------------------------------
  优化:更少的表嵌套
  要求:必须掌握
----------------------------------------------------------]]--

  -- 内存消耗最大
  polyline =  
  {  
  { x = 10.3, y = 98.5 }, 
  { x = 10.3, y = 18.3 }, 
  { x = 15.0, y = 98.5 }, 
  ... 
  } 
  -- 内存消耗较大
  polyline =  
  {  
  { 10.3, 98.5 }, 
  { 10.3, 18.3 }, 
  { 15.0, 98.5 }, 
  ... 
}
  -- 内存消耗最小
  polyline =  
  {  
  x = { 10.3, 10.3, 15.0, ...}, 
  y = { 98.5, 18.3, 98.5, ...} 
  } 

--[[----------------------------------------------------------
  优化:重用,避免对象创建
  要求:必须掌握
----------------------------------------------------------]]--


  local t = {} 
  for i = 1970, 2000 do 
    t[i] = os.time({year = i, month = 6, day = 14})   -- 慢:每次都会创建新表
  end  

  local t = {} 
  local aux = {year = nil, month = 6, day = 14}     -- 快,只创建1次
  local os_time = os.time
  for i = 1970, 2000 do 
    aux.year = i                                    
    t[i] = os_time(aux)                         
  end 

--[[----------------------------------------------------------
  留神:table的迭代方式
  要求:必须掌握
----------------------------------------------------------]]--
tbtest = {  
    [1] = 1,  
    [2] = 2,  
    [3] = 3,  
    [4] = 4,  
} 
 for key, value in pairs(tbtest) do  -- 顺序是Key的Hash值的顺序. 唯一可以真正遍历所有元素的方法
    print(value)  
end
--------------------------------------------------------------
tbtest = {  
    [1] = 1,  
    [2] = 2,  
    [3] = 3,  
    [5] = 5,  
} 
 
for k,v in ipairs(tbtest) do        -- 只会从1开始增长,到非连续的值为止,并不会将所有整数key迭代完.如果1不存在,则什么也不会迭代到
    print(v)  
end 
for i=1, table.maxn(tbtest) do      -- 从 1 到 最大的整数key,如果key不连续,那么此迭代相当浪费.
end
for i=1, #tablename do      -- 从 1 递增,碰到第一个不存在的key停止迭代
end
--------------------------------------------------------------
-- #table 操作符号 是从1开始遍历,逐步加1的方式遍历,碰到第一个不存在的key就要退出
-- #操作符会遍历表
-- maxn操作符会遍历所有的整数key
tbtest = {  
    [1] = 1,  
    [2] = 2,  
    [3] = 3,  
}  
print(#(tbtest))  ==> 3
--打印的就是3
tbtest = {  
    [1] = 1,  
    [2] = 2,  
    [6] = 6,  
}  
print(#(tbtest)) ==> 2


tbtest = {  
    [1] = 1,  
    [2] = 2,  
    [3] = 3,  
    [5] = 5,  
} 
 
for key, value in pairsByKeys(tbtest) do  
    print (key,value)
end 

--[[----------------------------------------------------------
  术语
----------------------------------------------------------]]--
